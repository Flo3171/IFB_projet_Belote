.TH "gestionCarte.c" 3 "Sun Jun 14 2020" "Version V1.0" "IFB_projet" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gestionCarte.c \- ficher contenant les fonctions relative a la gestion des cartes  

.SH SYNOPSIS
.br
.PP
\fC#include 'main\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBdistribueCarte\fP (\fBCarte\fP *pCarteMain)"
.br
.RI "distribue les cartes entre les différent joueur "
.ti -1c
.RI "void \fBsetCarte\fP (\fBCarte\fP *carte, Valeur valeurCarte, Couleur couleurCarte)"
.br
.RI "donne une valeur et une couleur a une carte "
.ti -1c
.RI "void \fBsupprimeCarte\fP (\fBCarte\fP carte[], int nbCarte, int carteASupprimer)"
.br
.RI "supprime une carte d'un tableau et réduit la taille de ce tableu par le bas "
.ti -1c
.RI "Joueur \fBvainqueurPli\fP (\fBCarte\fP \fBpli\fP[], Couleur atout, Joueur premierAJouer)"
.br
.RI "donne le vainquer d'un pli "
.ti -1c
.RI "float \fBforceCarte\fP (\fBCarte\fP carteACalculer, Couleur atout, Couleur entame)"
.br
.RI "calcul la force d'une carte, en faisant la probabilitée qu'elle a de gagné contre toutes les autres cartes "
.ti -1c
.RI "char \fBcarteValide\fP (\fBCarte\fP cartePose, \fBCarte\fP \fBpli\fP[], Couleur atout, \fBCarte\fP *pCarteMainJoueur, Joueur premierAJouer, Joueur parle)"
.br
.RI "ddétermine si une carte peut etre posé par un joueur "
.ti -1c
.RI "char \fBrechercherCarte\fP (\fBCarte\fP *pCarte, int nbCarte, Couleur couleurCherche, Valeur valeurCherche)"
.br
.RI "cherche dans un tableau de carte si il y a une certaine couleur ou une certaine valeur ou les deux "
.ti -1c
.RI "char \fBrechercherCarteSuperieur\fP (\fBCarte\fP *pCarte, int nbCarte, \fBCarte\fP carteCherche, Couleur atout, Couleur entame)"
.br
.RI "cherche dans un tableau de carte si il y a une carte d'une force suppérieur a carteCherche "
.ti -1c
.RI "float \fBsommeForceCarte\fP (\fBCarte\fP *tableauCarte, int nbCarte, Couleur atout)"
.br
.RI "calucule la somme force des carte dans un tableau "
.ti -1c
.RI "void \fBtrieCarte\fP (\fBCarte\fP tableauCarte[], int nbCarte, Couleur atout)"
.br
.RI "trie un tableau de cartes "
.ti -1c
.RI "char \fBcartePlaceAvant\fP (\fBCarte\fP carteRefference, \fBCarte\fP carteCompare, Couleur atout)"
.br
.RI "permet de savoir si une carte doit etre placée avant lors du trie des cartes "
.ti -1c
.RI "void \fBrechercheAnnonce\fP (\fBCarte\fP *pCarteMain, int pointAnonce[], Joueur utilisateur, char *pseudo[])"
.br
.RI "rechere dans un tableau de cartes qui correspond a la main d'un joureur si il peut faire des anonc, et si oui ajoute les points assacier au tableau dans le tableau des anonce "
.in -1c
.SH "Detailed Description"
.PP 
ficher contenant les fonctions relative a la gestion des cartes 


.PP
\fBAuthor\fP
.RS 4
Carlo\&.A & Florian\&.C 
.RE
.PP
\fBVersion\fP
.RS 4
v1\&.0 
.RE
.PP
\fBDate\fP
.RS 4
12 juin 2020 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "char cartePlaceAvant (\fBCarte\fP carteRefference, \fBCarte\fP carteCompare, Couleur atout)"

.PP
permet de savoir si une carte doit etre placée avant lors du trie des cartes 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP carteRefference : carte par raport a laquelle on compare 
.br
\fI\fBCarte\fP\fP carteCompare : carte que l'on compare 
.br
\fICouleur\fP atout : couleur de l'atout dans la manche 
.RE
.PP
\fBReturns\fP
.RS 4
char : renvoie 1 si la catre doit etre placée avant 0 sinon 
.RE
.PP
< Les deux carte sont elle de la meme famille
.PP
< si carteCompate est un atout
.PP
< si la couleur de la carteCompare est devant celle de carteRefference dans l'Ã©numÃ©ration(ordre arbitraire)
.SS "char carteValide (\fBCarte\fP cartePose, \fBCarte\fP pli[], Couleur atout, \fBCarte\fP * pCarteMainJoueur, Joueur premierAJouer, Joueur parle)"

.PP
ddétermine si une carte peut etre posé par un joueur 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP cartPose : carte que l'on veut poser 
.br
\fI\fBCarte\fP\fP pli[] : tableau contenet les carte du pli 
.br
\fICouleur\fP atout : couleur de l'atout 
.br
\fI\fBCarte\fP\fP *pCarteMainJoueur pointeur sur un tableau de 8 carte contenent les cartes dans la main du joueur 
.br
\fIJoueur\fP premierAJouer : premier joueur a jouer dans le pli 
.br
\fIJoueur\fP parle : joueur en train de jouer 
.RE
.PP
\fBReturns\fP
.RS 4
char 1 si la carte est valide 0 sinon 
.RE
.PP
< Fonction faite a partir de l'oranigrame qui montre comment dÃ©terminer si une carte est valide a partir des rÃ¨gle
.PP
< On verifier que ce n'est pas une carte vide
.PP
< premiÃ¨re carte du plis ?
.PP
< Le joueur posÃ¨de il la couleur demandÃ©e ?
.PP
< l'entame est en atout
.PP
< Le joueur a il un ajout de valeur supÃ©rieur au meilleur ajout posÃ©
.PP
< si la carte est un ajout le valeur supÃ©rieur au meilleur atout posÃ©
.PP
< Si la carte est un atout
.PP
< Si la carte est dans la couleur demandÃ©e
.PP
< Le partemenaire est maitre ?
.PP
< Le joueur a il un atout ?
.PP
< il y a deja un ajout de posÃ©
.PP
< Le joueur a il un ajout de valeur supÃ©rieur au meilleur ajout posÃ©
.PP
< si la carte est un ajout le valeur supÃ©rieur au meilleur atout posÃ©
.PP
< Si la carte est un atout alors elle est valide
.SS "void distribueCarte (\fBCarte\fP * pCarteMain)"

.PP
distribue les cartes entre les différent joueur 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP *pCarteMain : pointeur sur le tableau qui stocke les carte dans la main de chaque joueur 
.br
\fI\fP 
.RE
.PP

.SS "float forceCarte (\fBCarte\fP carteACalculer, Couleur atout, Couleur entame)"

.PP
calcul la force d'une carte, en faisant la probabilitée qu'elle a de gagné contre toutes les autres cartes 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP carteACalculer : carte dont on veut connaitre la force 
.br
\fICouleur\fP atout : couleur de l'atout durant la partie 
.br
\fICouleur\fP entame : couleur de l'entame durant la partie 
.RE
.PP
\fBReturns\fP
.RS 4
float : probabilitée de victoir de la carte 
.RE
.PP
< la carte est un atout ou que la manche se joue en tout atout
.PP
< si on est en tout atout mais que la couleur de la carte n'est pa la couleur de l'entame alors la carte sera plus faible que toutes les cartees dans la bonne couleur
.PP
< la manche est en sans atout et la carte est dans la couleur de l'entame
.PP
< on est en atout d'une certaine couleur ou en sans atoutavec une couleur diffÃ©rente de l'entame
.PP
< quand l'entame est diffÃ©rent de la couleur de la carte et que ce n'est pas un atout alor on pert a chaque fois
.SS "void rechercheAnnonce (\fBCarte\fP * pCarteMain, int pointAnonce[], Joueur utilisateur, char * pseudo[])"

.PP
rechere dans un tableau de cartes qui correspond a la main d'un joureur si il peut faire des anonc, et si oui ajoute les points assacier au tableau dans le tableau des anonce 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP *pCarteMain : pointeur sur le premier élément du tableau qui cintient les cartes de tout les joueur 
.br
\fIint\fP pointAnonce[] : tableau contenant les point d'anonce 
.br
\fIJoueur\fP utilisateur : donne la position de l'utilisateur, mettre SANS_Joueur pour faire une partie avec uniquement des ordinateur 
.br
\fIchar\fP *pseudo[] : tableau contenant les pseudo des 4 joueur 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
< on cherche si le joueur a un carrÃ©
.SS "char rechercherCarte (\fBCarte\fP * pCarte, int nbCarte, Couleur couleurCherche, Valeur valeurCherche)"

.PP
cherche dans un tableau de carte si il y a une certaine couleur ou une certaine valeur ou les deux 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP *pCarte : pointeur sur un tableau de carte 
.br
\fIint\fP nbCarte : nombre de carte dans le tableau 
.br
\fICouleur\fP couleurCherche : couleur que l'on veut chercher dans le tableau (mettre SANS_COULEUR pour rechercher toutes les couleur) 
.br
\fIValeur\fP valeurCherche : valeur que l'on cherche dans le tableau (mettre SANS_VALEUR pour chercher toutes les valeur 
.RE
.PP
\fBReturns\fP
.RS 4
char 1 si on a trouvé une carte qui correspond au critère 0 sinon 
.RE
.PP

.SS "char rechercherCarteSuperieur (\fBCarte\fP * pCarte, int nbCarte, \fBCarte\fP carteCherche, Couleur atout, Couleur entame)"

.PP
cherche dans un tableau de carte si il y a une carte d'une force suppérieur a carteCherche 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP *pCarte : pointeur sur un tableau de carte 
.br
\fIint\fP nbCarte : nombre de carte dans le tableau 
.br
\fI\fBCarte\fP\fP carteCherche : carte a laquele on veut que la carte cherchée soit supérieur 
.br
\fICouleur\fP atout : couleur de l'atout dans la manche 
.br
\fICouleur\fP entame : couleur de l'entame dans la manche 
.RE
.PP
\fBReturns\fP
.RS 4
char 1 si on a trouvé une carte qui correspond au critère 0 sinon 
.RE
.PP

.SS "void setCarte (\fBCarte\fP * carte, Valeur valeurCarte, Couleur couleurCarte)"

.PP
donne une valeur et une couleur a une carte 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP *carte : pointeur sur la carte a modifier 
.br
\fIValeur\fP valeurCarte : valeur a donner a la carte 
.br
\fICouleur\fP couleurCarte : couleur a donner a la carte 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP

.SS "float sommeForceCarte (\fBCarte\fP * tableauCarte, int nbCarte, Couleur atout)"

.PP
calucule la somme force des carte dans un tableau 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP tableauCarte : tableau de carte sur lequel on veut travailler 
.br
\fIint\fP nbCarte : nombre de carte dans le tableau 
.br
\fICouleur\fP atout : couleur de l'atout sur la manche 
.RE
.PP
\fBReturns\fP
.RS 4
float : la valeur de lla somme des force des carte 
.RE
.PP

.SS "void supprimeCarte (\fBCarte\fP carte[], int nbCarte, int carteASupprimer)"

.PP
supprime une carte d'un tableau et réduit la taille de ce tableu par le bas 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP carte[] : tableau conteneant les carte a modifier 
.br
\fIint\fP nbCarte : nombre total de carte 
.br
\fIint\fP carteASupprimer : indice dans le tableau de la carte a enlever 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP

.SS "void trieCarte (\fBCarte\fP tableauCarte[], int nbCarte, Couleur atout)"

.PP
trie un tableau de cartes 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP tableauCarte[] : tableau contenant les cartes a trier 
.br
\fIint\fP nbCarte nombre de carte dans le tableau 
.br
\fICouleur\fP atout : couleur de l'atout dans la manche 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
< On rÃ©alise un tri a bulle pour mettre atout du plus fort au moin fort au dÃ©but de la main puis les carte par famille
.PP
< Si la carte dois aller devant dans le tableau
.SS "Joueur vainqueurPli (\fBCarte\fP pli[], Couleur atout, Joueur premierAJouer)"

.PP
donne le vainquer d'un pli 
.PP
\fBParameters\fP
.RS 4
\fI\fBCarte\fP\fP pli[] : tableau contenant les carte du pli 
.br
\fICouleur\fP atout : couleur de l'atout durant cette manche 
.br
\fIJoueur\fP premierAJouer : joueur qui pose la première carte du pli 
.RE
.PP
\fBReturns\fP
.RS 4
Joueur : le jouer qui a gagné le pli 
.RE
.PP
< La carte du joueur que l'on test est plus forte que la meilleur actuelle alors ca devient la meilleure
.SH "Author"
.PP 
Generated automatically by Doxygen for IFB_projet from the source code\&.
